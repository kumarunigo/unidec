Procedure oriented programming : C programming
	focus on task/function
	
		flyRocket:
		
		
Object oriented programming : Java,	Dotnet,	Ruby
	focus on Data and functions around that data
Modular approach

	Rocket
		Has-A : FuelChamber, exhaution, lifesupport		
		Does-A
			fly			
			lifesupport
		
	BankAccount
	
		Has-A : (attributes or Data of the system)
			accountNumber=123,routing=11,address=ca,
			cusName=john,Money=100$,phone=456
			
		Does-A : (Actions associated with the system)
			withdraw = 10$
				deduct 10$ from Money100$ = 90$ (LOGIC)
			deposit = 25$
				add 25$ to Money100$ = 125$
			changePhone = 456
				update the new phone
			changeAddress = ca
				upadte the new address
			
	public class BankAccount{
		String name="john";
		int money=100;
		int phone=456;

		public void withdraw(int withdrawAmount){
			money=money-withdrawAmount;
		}

		public void deposit(int depositAmount){
			money=money+depositAmount;
		}
	}
		
		
		
	amazon
		has-a  product, customer, buyer,seller
		
		does-a
			login
			add2Cart
			shop
			checkout
		
		
	Rock
	
		has-a 
			color,weight,element
			
		does-a
			throw
			paperweight
			
	15 years R and D 		
	Iphone3 - 2006
		call
		text
		browse
		
	Reusability
	Iphone4 - 2007
		call
		text
		browse
		map
		
	===========================
	abstract class - abstraction
	
	GenericPyment
		name
		shipping address
		billing address
		contact email id
		contact phone
		
	
	PaymentCreditCard
		credit card
		
	CryptoCard
		cryptowallet
		
	Paypal
		paypal userid pwd
			
	Customer >>>>>>>> bank account >>>>>>>>>>>>> amazon	
	set												get
			
			
			

loginPage
	Login.java
	registeration.java
browsing
	shopping.java
	checkout.java


bankAccount {
	withdraw{
		deduct withdraw amount from balanace
	}
	deposit{
		add amount to balanace
	}
	checkBalance{
		display available balance
	}
}
loanapplication{
applyloan
check credit score
check salary
}





Simple Data - "PRIMITIVE DATA TYPE"
1) number : 
	byte ( 1 byte ) : -128 to +127 
	short (2 byte ) : -32k to + 32k
	int ( 4 byte ) : -2billion to + 2 billion
	long ( 8 byte) : trillions
2) decimal number
	float ( 4 bytes) : 6 decimal point accuracy
	double ( 8 bytes) : 
3) yes/no
	boolean 
4) 1 character : A-Z , 0-9, special character
	char
	
Complex Data - "OBJECT DATA TYPE"
1) group of characters
	firstname : john
	String 
2) sub information ;
	address : 123 , abcd street, city, state, 12345
	new program to be created


**************************

int a=30; 
	int = data type
	a   =  variable ( can change ) 
	30 = value

int b; // declaration line... declare variable named b is capable of storing numbered value
int c=20;  // initialization.... when value has been given/assigned to a variabel FIRST time 
c=30;      // re-assignment
 

float weight;
weight=123.1f;
weight=125.1f;


int age=123;
	int is a data type
	age is a variable
	123 is a value
	age is variable capable of storing numbered value
	int age is declaratiion
	age=123; is initialization


int a=10;
int b=a;
int c=10+20;
int d=10+c;

Always process RHS and convert into a single value
equal sign RULES... 
1) LHS should always be a variable
2) RHS can have values , variable, expressions
	when RHS has variable or expression
	int b=a; (replace value of RHS variable)
	int b=10; 
	
	int c=10+20; (solve the expression)
	int c=30;
	
	int d=10+c; ( 1-replace all RHS variable value...  2-solve the expression)
	int d=10+30; 
	int d=40; 